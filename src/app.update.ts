import {
	Ctx,
	Hears,
	InjectBot,
	Message,
	On,
	Start,
	Update
} from 'nestjs-telegraf'
import { Telegraf } from 'telegraf'
import { actionButtons } from './app.buttons'
import { AppService } from './app.service'
import { showList } from './app.utils'
import { Context } from './context.interface'

@Update()
export class AppUpdate {
	constructor(
		@InjectBot() private readonly bot: Telegraf<Context>,
		private readonly appService: AppService
	) {}

	@Start()
	async startCommand(ctx: Context) {
		await ctx.reply('Hi! Friend üëã')
		await ctx.reply('–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?', actionButtons())
	}

	@Hears('‚ö°Ô∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É')
	async createTask(ctx: Context) {
		ctx.session.type = 'create'
		await ctx.reply('–û–ø–∏—à–∏ –∑–∞–¥–∞—á—É: ')
	}

	@Hears('üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
	async listTask(ctx: Context) {
		const todos = await this.appService.getAll(ctx.message.from.id)
		await ctx.reply(showList(todos))
	}

	@Hears('‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å')
	async doneTask(ctx: Context) {
		ctx.session.type = 'done'
		await ctx.deleteMessage()
		await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ')
	}

	@Hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ')
	async editTask(ctx: Context) {
		ctx.session.type = 'edit'
		await ctx.deleteMessage()
		await ctx.replyWithHTML(
			'–ù–∞–ø–∏—à–∏ ID –∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: \n\n' +
				'–í —Ñ–æ—Ä–º–∞—Ç–µ - <b>1 | –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</b>'
		)
	}

	@Hears('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ')
	async deleteTask(ctx: Context) {
		ctx.session.type = 'remove'
		await ctx.deleteMessage()
		await ctx.reply('–ù–∞–ø–∏—à–∏ ID –∑–∞–¥–∞—á–∏: ')
	}

	@On('text')
	async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
		if (!ctx.session.type) return

		const user_id = ctx.message.from.id

		if (ctx.session.type === 'create') {
			const todos = await this.appService.createTask(message, user_id)
			await ctx.reply(showList(todos))
		}

		if (ctx.session.type === 'done') {
			const todos = await this.appService.doneTask(Number(message), user_id)

			if (!todos) {
				await ctx.deleteMessage()
				await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
				return
			}

			await ctx.reply(showList(todos))
		}

		if (ctx.session.type === 'edit') {
			const [taskId, taskName] = message.split(' | ')
			const todos = await this.appService.editTask(
				Number(taskId),
				taskName,
				user_id
			)

			if (!todos) {
				await ctx.deleteMessage()
				await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
				return
			}

			await ctx.reply(showList(todos))
		}

		if (ctx.session.type === 'remove') {
			const todos = await this.appService.deleteTask(Number(message), user_id)

			if (!todos) {
				await ctx.deleteMessage()
				await ctx.reply('–ó–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!')
				return
			}

			await ctx.reply(showList(todos))
		}
	}
}
